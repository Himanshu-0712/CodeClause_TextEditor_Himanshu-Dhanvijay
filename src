package Code_Clause;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.URI;

class text_Editor implements ActionListener {
    JFrame f;
    JMenuBar menuBar;
    JMenu file, edit, themes, help;
    JTextArea textArea;
    JScrollPane scrollPane;
    JMenuItem darkTheme, moonLightTheme, defaultTheme, save, open, close, cut, copy, paste, New, selectAll, videoHelp,GitHub_Link, fontSize;
    JPanel saveFileOptionWindow;
    JLabel fileLabel, dirLabel;
    JTextField fileName, dirName;

    text_Editor() {
        f = new JFrame("NotePad"); //For Setting The Frame
        Image img = Toolkit.getDefaultToolkit().getImage("src\\Code_Clause\\TextEditor\\text_Editor\\img1.jpg");
        f.setIconImage(img);
        menuBar = new JMenuBar();

        //menus
        file = new JMenu("File");
        edit = new JMenu("Edit");
        themes = new JMenu("Themes");
        help = new JMenu("Help");

        //adding the menus to menu bar
        menuBar.add(file);
        menuBar.add(edit);
        menuBar.add(themes);
        menuBar.add(help);
        f.setJMenuBar(menuBar);

        // adding submenus to the file
        save = new JMenu("Save");
        open = new JMenu("Open");
        New = new JMenu("New");
        close = new JMenu("Exit");
        file.add(open);
        file.add(New);
        file.add(save);
        file.add(close);

        //edit menu
        cut = new JMenuItem("Cut");
        copy = new JMenuItem("Copy");
        paste = new JMenuItem("Paste");
        selectAll = new JMenuItem("Select All");
        fontSize = new JMenuItem("Font Size");
        edit.add(cut);
        edit.add(copy);
        edit.add(paste);
        edit.add(selectAll);
        edit.add(fontSize);

        darkTheme = new JMenuItem("Dark Theme");
        moonLightTheme = new JMenuItem("MoonLight");
        defaultTheme = new JMenuItem("Default Theme");
        themes.add(darkTheme);
        themes.add(moonLightTheme);
        themes.add(defaultTheme);

        //help menu
        videoHelp = new JMenuItem("Video Reference");
        GitHub_Link = new JMenuItem("Documentation");
        help.add(videoHelp);
        help.add(GitHub_Link);

        //TextArea
        textArea = new JTextArea(32, 88);
        f.add(textArea);

        //scrollPane
        scrollPane = new JScrollPane(textArea);
        //scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        //scrollPane.setHorizontalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setHorizontalScrollBar(scrollPane.createHorizontalScrollBar());
        scrollPane.setVerticalScrollBar(scrollPane.createVerticalScrollBar());
        scrollPane.setBackground(Color.blue);
        f.add(scrollPane);

        //adding event Listeners for cut ,copy & Paste
        cut.addActionListener(this);
        copy.addActionListener(this);
        paste.addActionListener(this);
        selectAll.addActionListener(this);
        fontSize.addActionListener(this);
        open.addActionListener(this);
        save.addActionListener(this);
        New.addActionListener(this);
        darkTheme.addActionListener(this);
        moonLightTheme.addActionListener(this);
        defaultTheme.addActionListener(this);
        videoHelp.addActionListener(this);
        GitHub_Link.addActionListener(this);
        close.addActionListener(this);

        f.addWindowListener(new WindowListener()
        {
            @Override
            public void windowOpened(WindowEvent e) {}

            @Override
            public void windowClosing(WindowEvent e) {
                int confirmExit = JOptionPane.showConfirmDialog(f, "Do you want to exit..?", " Confirm Before Saving", JOptionPane.YES_NO_OPTION);
                if (confirmExit == JOptionPane.YES_NO_OPTION) {
                    f.dispose();
                } else if (confirmExit == JOptionPane.NO_OPTION) {
                    f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
            @Override
            public void windowClosed(WindowEvent e) {}

            @Override
            public void windowIconified(WindowEvent e) {}

            @Override
            public void windowDeiconified(WindowEvent e) {}

            @Override
            public void windowActivated(WindowEvent e) {}

            @Override
            public void windowDeactivated(WindowEvent e) {}
        });

        //Keyboard Listeners
        KeyListener k = new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int keyCode = e.getKeyCode();
                if (keyCode == KeyEvent.VK_S && e.isControlDown())
                    saveTheFile(); //Saving the file
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        };

        textArea.addKeyListener(k);
        //Default Operations for frame
        f.setSize(1000, 596);
        f.setResizable(false);
        f.setLocation(250, 100);
        f.setLayout(new FlowLayout());
        f.setVisible(true);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //Copy and paste operations
        if (e.getSource() == cut)
            textArea.cut();
        if (e.getSource() == copy)
            textArea.copy();
        if (e.getSource() == paste)
            textArea.paste();
        if (e.getSource() == selectAll)
            textArea.selectAll();

        //change the fontsize by value
        if (e.getSource() == fontSize) {

            String sizeOfFont = JOptionPane.showInputDialog(f, "Enter Font Size: ", JOptionPane.OK_CANCEL_OPTION);
            if (sizeOfFont != null) {
                int convertSizeOfFont = Integer.parseInt(sizeOfFont);
                Font font = new Font(Font.SANS_SERIF, Font.PLAIN, convertSizeOfFont);
                textArea.setFont(font);
            }
        }

        //Open the file
        if (e.getSource() == open) {
            JFileChooser chooseFile = new JFileChooser();
            int i = chooseFile.showOpenDialog(f);
            if (i == JFileChooser.APPROVE_OPTION) {
                File file = chooseFile.getSelectedFile(); //select the file
                String filePath = file.getPath(); //get the file path
                String fileNameToShow = file.getName(); //get the file name
                f.setTitle(fileNameToShow);

                try {
                    BufferedReader readFile = new BufferedReader(new FileReader(filePath));
                    String tempString1 = "";
                    String tempString2 = "";

                    while ((tempString1 = readFile.readLine()) != null)
                        tempString2 += tempString1 + "\n";

                    textArea.setText(tempString2);
                    readFile.close();
                } catch (Exception ae) {
                    ae.printStackTrace();
                }
            }
        }

        //Save the file
        if (e.getSource() == save) saveTheFile();

        //New menu operations
        if (e.getSource() == New) textArea.setText("");

        //Exit from the window
        if (e.getSource() == close) System.exit(1);

        //themes area
        if (e.getSource() == darkTheme) {
            textArea.setBackground(Color.DARK_GRAY); //dark Theme
            textArea.setForeground(Color.WHITE);
        }

        if (e.getSource() == moonLightTheme) {
            textArea.setBackground(new Color(107, 169, 255));
            textArea.setForeground(Color.black);
        }

        if (e.getSource() == defaultTheme) {
            textArea.setBackground(new Color(255, 255, 255));
            textArea.setForeground(Color.black);
        }

        if (e.getSource() == GitHub_Link) {
            try {
                String url = "https://github.com/Himanshu-0712";
                Desktop.getDesktop().browse(URI.create(url));
            } catch (Exception a) {
                a.printStackTrace();
            }
        }
    }

    //Save the file
    public void saveTheFile() {
        saveFileOptionWindow = new JPanel(new GridLayout(2, 1));
        fileLabel = new JLabel("Filename :- ");
        dirLabel = new JLabel("Save File To :- ");
        fileName = new JTextField();
        dirName = new JTextField();

        saveFileOptionWindow.add(fileLabel);
        saveFileOptionWindow.add(fileName);
        saveFileOptionWindow.add(dirLabel);
        saveFileOptionWindow.add(dirName);

        JOptionPane.showMessageDialog(f, saveFileOptionWindow); //show the saving dialogue box
        String fileContent = textArea.getText();
        String filePath = dirName.getText();

        try {
            BufferedWriter writeContent = new BufferedWriter(new FileWriter(filePath));
            writeContent.write(fileContent);
            writeContent.close();
            JOptionPane.showMessageDialog(f, "File Successfully saved!");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
    public class TextEditor
    {
        public static void main(String[] args)
        {
            new text_Editor();
        }
    }

